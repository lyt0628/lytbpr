

* Code
** Module
#+BEGIN_SRC lua :tangle ../../src/util/test_vec.lua  
  local Vec = require("vec")
  <<test_cases>>
#+END_SRC

** Fixtures
#+NAME: v3
#+BEGIN_SRC lua
  v3 = Vec.new(1, 2, 3)
#+END_SRC

** Test Cases
:PROPERTIES:
:header-args: :noweb-ref test_cases
:END:

*** Test get()
#+BEGIN_SRC lua
  <<v3>>
  assert(1==v3:get(1))
  assert(2==v3:get(2))
  assert(3==v3:get(3))
#+END_SRC

*** Test with()
#+BEGIN_SRC lua
  <<v3>>
  v3 = v3:with(1, 6)
  assert(6==v3[1])
#+END_SRC

*** Test size()
#+BEGIN_SRC lua
  <<v3>>
  assert(3==v3:size())
#+END_SRC

*** Test add()
#+BEGIN_SRC lua
  <<v3>>
  v = v3:add(v3)
  assert(2==v:get(1))
  assert(4==v:get(2))
  assert(6==v:get(3))

  assert(1==v3:get(1))
  assert(2==v3:get(2))
  assert(3==v3:get(3))
#+END_SRC

*** Test add()
#+BEGIN_SRC lua
  <<v3>>
  v = v3:sub(v3)
  assert(0==v:get(1))
  assert(0==v:get(2))
  assert(0==v:get(3))

  assert(1==v3:get(1))
  assert(2==v3:get(2))
  assert(3==v3:get(3))
#+END_SRC


*** Test cross3()
#+BEGIN_SRC lua
  v = Vec.new(1,0,0)
  v2 = Vec.new(0,1,0)
  v3 = Vec.cross3(v,v2)
  assert(0==v3:get(1))
  assert(0==v3:get(2))
  assert(1==v3:get(3))
#+END_SRC


*** Test __index
#+BEGIN_SRC lua
  <<v3>>
  assert(1==v3[1])
  assert(2==v3[2])
  assert(3==v3[3])
#+END_SRC

