

We use the same code structure as [[./ray_triangle_intersection.org]].
We modify test_ray_triangle_intersection() method for geting the point of intersection and normal of surface.
See [[compute_wight_coordinate_of_projection_of_point]]


We get the position for computing the thrink of enege.
We prepare two variable L and L_c. L is the position of Light(A Point Light), and L_c is
Color of Light.

In setting color of image, we not just set it as Red, but Compute color form Light and two major
principle.
1. The Enege is thrink by 1/ r^2 to distance.
2. In Ligter hit into surface, only cosine of light particle recived by the surface.


Lambert assume all the surface are same, With a Constant factor and above principle, lambert
model is complete.
See [[compute_color_and_set_as_pixel]].

The rendered result like:


[[file:../triangle_lambert.ppm]]


+y Down
+z Right
+x Depth

260 Pixel = 10 cm
1 cm = 26 Pixel

#+NAME: FN:m_to_pixel
#+BEGIN_SRC lua
  function to_pixel(value_in_cm)
     return 26 * value_in_cm
  end

#+END_SRC

* Dependencies
#+NAME: deps
#+BEGIN_SRC lua lua
  require("conf_path")
  local Vec = require("vec")
  local Mat = require("mat")
  local PPM = require("ppm")
  local Ray = require("ray")
#+END_SRC
* Main Code Block
#+BEGIN_SRC lua :tangle ../bsdf_lambert.lua
  <<deps>>
  <<FN:m_to_pixel>>
  <<prepare_view_and_scene>>
  <<prepare_ray>>
  <<prepare_light>> 
  <<bsdf>>
  <<precompute_triangle_wight_coordinate_and_normal>>

  <<FN:test_ray_trangle_intersection>>
  <<FN:BSDF>>
  <<render>>
  viewport:save("triangle_lambert.ppm")
#+END_SRC

* Prepare Viewport And Scene
#+NAME: prepare_view_and_scene
#+BEGIN_SRC lua
  local A = Vec.new(to_pixel(1.7641), to_pixel(-147.445), to_pixel(-225.5))
  local B = Vec.new(to_pixel(0.21684), to_pixel(-89.257), to_pixel(129.431))
  local C = Vec.new(to_pixel(0.71684), to_pixel(248.68), to_pixel(80.808))
  local P = Vec.new(to_pixel(-1), 0, 0)
  local viewport = PPM.new(512, 512)
#+END_SRC

* Prepare Ray
#+NAME: prepare_ray
#+BEGIN_SRC lua
  local directions = {}
  for z = -256, 255 do
    for y = -256, 255 do
       table.insert(directions, Vec.new(1, y, z))
    end
  end
#+END_SRC

* Prepare Light
#+NAME: prepare_light
#+BEGIN_SRC lua
  -- Light And Its Color
  local L = Vec.new(to_pixel(-100), to_pixel(100), 0)
  local L_c = Vec.new(55, 200, 0)

  print("L_c is: ", L_c:to_str())


  local L_env = Vec.new(20, 20, 20)
#+END_SRC

* Precompute Triangle Wight Coordinate And Normal
#+NAME: precompute_triangle_wight_coordinate_and_normal
#+BEGIN_SRC lua
  local AB = B - A
  local AC = C - A
  local N = Vec.cross3(AB, AC):normalized()

  local AB_o = Vec.cross3(N, AB)
  AB_o = AB_o / (AC:dot(AB_o))
  local AC_o = Vec.cross3(N, AC)
  AC_o = AC_o / (AB:dot(AC_o))

  print("Normal Of Triangle: ", N:to_str())
  print("Axis AB_o of Wight Coordinate: ", AB_o:to_str())
  print("Axis AC_o of Wight Coordinate: ", AC_o:to_str())
  print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++")
#+END_SRC

* FN:test_ray_trangle_intersection
#+NAME: FN:test_ray_trangle_intersection
#+BEGIN_SRC lua
  function test_ray_triangle_intersection(P, d, A, N)
        <<check_if_direction_of_ray_oppsite_to_plane>>
        <<compute_wight_coordinate_of_projection_of_point>>
  end
#+END_SRC

** Check If Direction Of Ray Oppsite to Plane
#+NAME: check_if_direction_of_ray_oppsite_to_plane
#+BEGIN_SRC lua
  local u = N:dot(d)

  if(u == 0) then
   -- print("Ray parall with Plane")
    return false
  end

  if math.abs(u) < 1e-15 then
   -- print("Unstable")
    return false
  end


  t = ((A-P):dot(N))/u

  if t < 0 then
   -- print("Ray miss plane")
    return false
  end


#+END_SRC
** Compute Wight Coordinate Of Projection Of Point
#+NAME: compute_wight_coordinate_of_projection_of_point
#+BEGIN_SRC lua 
  local Q = P + t * d

  local c = (Q - C):dot(AC_o)
  local b = (Q - B):dot(AB_o)
  local a = 1 - (b + c)

  if a < 0 or a > 1 or b < 0 or b > 1 or c < 0 or c > 1 then
   -- print("Out of triangle,", a, b, c)
    return false

  else
    print("Inside triangle,", a, b, c)

    -- Return a Extra Position of Intersection Point
    return true, Q
  end
#+END_SRC

* FN:BSDF
LambertBSDF has an equal rate of attenuation for all vertices on the surface when light passes through reflection.
We use Lambda expression to define BSDF as (incident_direction, reflected_direction, surfaceInfo) => attenuation_vector.
#+NAME: FN:BSDF
#+BEGIN_SRC  lua
  function BSDF(L_i, L_o, surfaceInfo)
    local attenuation
    <<lambert_bsdf>>
    return attenuation
  end
#+END_SRC

#+NAME: lambert_bsdf
#+BEGIN_SRC  lua
  attenuation = Vec.new(5, 50, 5) * 1e7
#+END_SRC

* Render With Physical Principles
When the incident light shines on the surface, the energy is attenuated to a certain extent
due to the principles of distance attenuation and tilt.
#+NAME: render
#+BEGIN_SRC lua
  for r = 1, 512 do
    for c = 1, 512 do
       local inside, Q = test_ray_triangle_intersection(P, directions[r + (c-1) * 512 ], A, N)
       if inside then
           local incident_vector = Q - L
           local distance_to_light = #(incident_vector)
           local incident_direction = incident_vector:normalized()
           local reflected_direction = (P - Q):normalized()


           local distance_attenuation = 1 / (4 * math.pi * distance_to_light^2)
           print("Distance Attenuation: ", distance_attenuation)
           local l = L_c * distance_attenuation  -- Distance Attenuation
           print("L_c with Distance Attenuation: ", l:to_str())

           local tilt_attenuation = N:dot(incident_direction:scale(-1))
           print("Tilt Attenuation Without Campled: ", tilt_attenuation)
           l = l * math.max(0, tilt_attenuation) -- Titel Attenuation
           print("L_c with Tilt Attenuation: ", L_c:to_str())


           local surfaceInfo = {}
           surfaceInfo.normal = N
           local bsdf_attenuation = BSDF(incident_direction, reflected_direction, surfaceInfo)
           print("BSDF Attenuation: ", bsdf_attenuation:to_str())

           local pixel = l * bsdf_attenuation  + L_env
           print("Final Color: ", pixel:to_str())
           print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++")
           viewport:set(r,c, pixel)
       end
    end
  end
#+END_SRC




