

#+BEGIN_SRC emacs-lisp :eval yes :results silent
  (org-babel-lob-ingest "./bsdf_lambert.org")
#+END_SRC



* Main Code Block
#+BEGIN_SRC lua :tangle ../example/bsdf_blinn_phong.lua
  package.path = package.path .. ";" .. "../src/util/?.lua"
  local Vec = require("vec")
  local Mat = require("mat")
  local PPM = require("ppm")


  local img = PPM.new(512, 512)

  -- Light And Its Color
  local L = Vec.new(0, 0, 0)
  local L_c = Vec.new(255, 200, 100)

  -- A factor to modify light value
  
  local shinness = 8

  local P = Vec.new(-1, 0, 0)
  local A = Vec.new(10, -1700, 1550)
  local B = Vec.new(13, 250, 500)
  local C = Vec.new(10, 1200, 1000)

  local AB = B - A
  local AC = C - A
  local N = Vec.cross3(AB, AC):normalized()

  local AB_o = Vec.cross3(N, AB)
  AB_o = AB_o / (AC:dot(AB_o))
  local AC_o = Vec.cross3(N, AC)
  AC_o = AC_o / (AB:dot(AC_o))


  <<FN:test_ray_trangle_intersection>>

  <<prepare_directions_pointer_to_pixels_in_near_plane>>
  <<render_img_with_color_if_ray_hit_triangle>>

  img:save("triangle_blinn_phong.ppm")
#+END_SRC



** Rener Wtih lamert BSDF Sample

#+NAME: render_img_with_color_if_ray_hit_triangle
#+BEGIN_SRC lua
  for r = 1, 512 do
    for c = 1, 512 do
       local d = directions[r + (c-1) * 512 ]
       local inside, Q = test_ray_triangle_intersection(P, d, A, N)
       if inside then
          <<compute_color_and_set_as_pixel>>
       end
    end
  end
#+END_SRC



#+NAME: compute_color_and_set_as_pixel
#+BEGIN_SRC lua

  local w_i = (Q - L)
  local w_o = d:scale(-1)

  local w_h = (w_i + w_o):normalized()


  local distance_to_light = #(w_i)
  local L_i = L_c / (4 * math.pi * distance_to_light^2) 
  print("L_i:", L_i:r(), L_i:g(), L_i:b())


  print( "Dot:" , w_h:dot(N))
  local blinn_phong_bsdf = math.max((w_h:dot(N)),0)^ shinness  * 1e21

  local L_o = L_i * blinn_phong_bsdf 
  print("L_o:", L_o[1], L_o[2], L_o[3] )
  img:set(r, c, L_o)
#+END_SRC

The Result:

[[../example/triangle_blinn_phong.ppm]]
